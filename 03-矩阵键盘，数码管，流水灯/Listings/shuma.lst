C51 COMPILER V9.60.7.0   SHUMA                                                             03/30/2024 15:05:22 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE SHUMA
OBJECT MODULE PLACED IN .\Objects\shuma.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE shuma.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\shu
                    -ma.lst) OBJECT(.\Objects\shuma.obj)

line level    source

   1          #include <STC15F2K60S2.H>
   2          #include "typedef.h"
   3          
   4          u8 shumatmp[8]={23,23,23,23,23,23,23,23};//数码管缓冲区
   5          
   6          //共阳数码管段码表(考试会给的吧)
   7          //code代表放入只读存储器
   8          u8 code LedChar[] = {
   9                  0xC0, 0xF9, 0xA4, 0xB0,//0    0  1  2  3
  10                  0x99, 0x92, 0x82, 0xF8,//4    4  5  6  7
  11                  0x80, 0x90, 0x88, 0x83,//8    8  9  A  b
  12                  0xC6, 0xA1, 0x86, 0x8E,//12   C  d  E  F
  13                  0x89, 0xC7, 0xC8, 0x8c,//16   H  L  N  P
  14                  0xC1, 0xbf, 0x7f, 0xff,//20   U  -  .  null
  15          }; 
  16          
  17          //单字节数码管显示(直接输入数字，在中断调用)
  18          //locate：1-8  number：1-23
  19          void shuma(u8 locate,u8 number)
  20          {
  21   1              //清零
  22   1              P2=(P2&0x1f)|0xe0;
  23   1              P0=0xff;
  24   1              P2&=0x1f;
  25   1              //数码管位选（1亮）   y6c
  26   1              P2=(P2&0x1f)|0xc0;
  27   1              P0=(0x01<<(locate-1));
  28   1              P2&=0x1f;
  29   1              //数码管段选（0亮）   y7c
  30   1              P2=(P2&0x1f)|0xe0;
  31   1              P0=LedChar[number];
  32   1              P2&=0x1f;
  33   1      }
  34          
  35          //数码管辅助多位整数显示（起始位置，u32整数）
  36          //把值填入缓存数组，放入中断更新数组  locate：1-8
  37          void warma(u8 locate,u32 num)
  38          {
  39   1              char i,j=0;
  40   1              u8 shark[8];
  41   1              for(i=0;i<8;i++)
  42   1              {
  43   2                      shark[i]=num%10;
  44   2                      num/=10;
  45   2              }
  46   1              for(i=7;i>=0;i--)
  47   1              {
  48   2                      if(shark[i]==0){shumatmp[i]=23;j++;}
  49   2                      else break;
  50   2              }
  51   1              for(;i>=0;i--)
  52   1              {
  53   2                      shumatmp[6-j-i+locate] = shark[i];
  54   2              }
C51 COMPILER V9.60.7.0   SHUMA                                                             03/30/2024 15:05:22 PAGE 2   

  55   1      }
  56          
  57          //数码管扫描，用于中断函数，实现多位显示
  58          void shumascan()
  59          {
  60   1              static u8 count = 0;
  61   1              count++;
  62   1              switch(count)
  63   1              {
  64   2                      case 1:
  65   2                              shuma(1,shumatmp[0]);
  66   2                              break;
  67   2                      case 2:
  68   2                              shuma(2,shumatmp[1]);
  69   2                              break;
  70   2                      case 3:
  71   2                              shuma(3,shumatmp[2]);
  72   2                              break;
  73   2                      case 4:
  74   2                              shuma(4,shumatmp[3]);
  75   2                              break;
  76   2                      case 5:
  77   2                              shuma(5,shumatmp[4]);
  78   2                              break;
  79   2                      case 6:
  80   2                              shuma(6,shumatmp[5]);
  81   2                              break;
  82   2                      case 7:
  83   2                              shuma(7,shumatmp[6]);
  84   2                              break;
  85   2                      case 8:
  86   2                              shuma(8,shumatmp[7]);
  87   2                              count = 0;
  88   2                              break;
  89   2              }
  90   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    293    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
